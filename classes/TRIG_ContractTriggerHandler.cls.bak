/** 
* @author       Anton Soloveyv (anton_soloveyv@epam.com)
* @date         2014 February 6
* @description  Trigger handler for Contract events
**/
public with sharing class TRIG_ContractTriggerHandler extends TRIG_TriggerHandlerAbstract 
{
    public boolean IsTriggerContext { get { return isTriggerExecuting; } }
    
    private ID TLRContractRecordTypeId;
    
    public TRIG_ContractTriggerHandler (boolean isTriggerExecuting)
    {
        super(isTriggerExecuting);
        TLRContractRecordTypeId = TLR_RecordTypeHelper.getId('Contract', 'TLR Contract');
    }
    
    public override void OnBeforeInsert(List<sObject> newTriggerValues)
    {
        setVATAllowed(newTriggerValues);
        ContractCreation(newTriggerValues);
        UpdateAccountLifeCycle(newTriggerValues); // 1 SOQL Query, 1 DML statement
        AssignAdministrativeContact(newTriggerValues);
    }
    public override void OnAfterInsert(List<sObject> newTriggerValues, Map<ID, sObject> newTriggerValuesMap)
    {

    }
    
    public override void OnBeforeUpdate (List<sObject> oldTriggerValues, List<sObject> newTriggerValues, Map<ID, sObject> oldTriggerValuesMap, Map<ID, sObject> newTriggerValuesMap)
    {
        ValidateInvoiceLevels(newTriggerValues, oldTriggerValues, newTriggerValuesMap, oldTriggerValuesMap);
        updateSEPASection(newTriggerValues, oldTriggerValues, newTriggerValuesMap, oldTriggerValuesMap);
        AssignAdministrativeContact(newTriggerValues);
    }
    public override void OnAfterUpdate  (List<sObject> oldTriggerValues, List<sObject> newTriggerValues, Map<ID, sObject> oldTriggerValuesMap, Map<ID, sObject> newTriggerValuesMap)
    {
       	CreateTasksForWelcomeProcess(newTriggerValues);
    }
    
    public override void OnBeforeDelete (List<sObject> oldTriggerValues, Map<ID, sObject> oldTriggerValuesMap)
    {
    
    }
    public override void OnAfterDelete(List<sObject> oldTriggerValues, Map<ID, sObject> oldTriggerValuesMap)
    {

    }

    public override void OnAfterUndelete(List<sObject> oldTriggerValues, Map<ID, sObject> oldTriggerValuesMap)
    {
    
    }
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    /*
    *@Description   :- Following methos inforced not to apply VAT on listed countries
    *@Date          :- 23-01-2013
    *@Param         :- list of new contracts
    **/
    private void setVATAllowed(Contract[] newContracts)
    {
        List <TLR_VatNotAllowedCountryList__c> countries = TLR_VatNotAllowedCountryList__c.getAll().values();
        Set<String> countryList = new Set<String>();
        
        for (TLR_VatNotAllowedCountryList__c countryObj : countries)
            countryList.add(countryObj.Country_Name__c);
        system.debug('============= TRIG_ContractTriggerHandler: notToApplyVATonCountries: countriesList: ' + countryList);
        
        Map <Id, String> contractBillingCountryMap = new Map <Id,String>();
        
        try
        {
            Set<Id> accountIds = new Set<Id>();
            for (Contract cont : newContracts)
                accountIds.add(cont.AccountId);
            List <Account> accountsList = [Select Id ,BillingCountry from Account where Id IN : accountIds];
            
            for (Contract c : newContracts)
            {
                for (Account accObj : accountsList)
                {
                    if (c.AccountId == accObj.Id)
                        contractBillingCountryMap.put(c.Id, accObj.BillingCountry); 
                }
            }
            
            for (Contract contract: newContracts)
            {
                if (contract.RecordTypeId == TLRContractRecordTypeId)
                {
                    if (countryList.contains(contractBillingCountryMap.get(contract.Id)))
                    {
                        contract.VAT_Included__c = true;
                    }
                }
            }
        } // try
        catch (Exception e)
        {
            Generic.StandardException ex = new Generic.StandardException();
            ex.SetMessage('Error: Problem with setting VAT_Included__c: ' + e.getMessage());
            throw ex;
        }
    } //setVATAllowed
    
    
    private void ContractCreation(Contract[] newContracts)
    {
        //TLR_ContractCreationHandler contractHandler = new TLR_ContractCreationHandler();
        if(newContracts.isEmpty())
            return;
            
        Set<String> TWA_products = new Set<String>{'TWD','TWD SUPPORT', 'CD', 'SB', 'TM'};    
        Set<String> TLR_products = new Set<String>{'FX', 'TACTIVE', 'TPRO', 'TFC', 'TFX' };
        Set<String> TAS_products = new Set<String>{'TAS', 'TAS-TMS'};
        
        List<Account> TWAaccounts = New List<Account>();
        List<Contract> TLRcontracts = New List<Contract>();
        List<Account> TASaccounts = New List<Account>();
                                   
        //call ContractCreation_CommonMethod
        Map<ID, Account> mapAcc =  getAccountsMap(newContracts);
        for (Contract con : newContracts)
        {       //fill new Contract fields
                Account currAcc = mapAcc.get(con.AccountId);        
                con.Account_Name__c = currAcc.Name;
                
                if(currAcc.Direct_Debit__c != null)         con.Direct_Debit__c        = currAcc.Direct_Debit__c;//SEPA
                if(currAcc.Direct_Debit__c != null && currAcc.Direct_Debit__c == TRUE)
                {   //SEPA section fields
                    if(currAcc.BIC_Code__c != null)             con.BIC_Code__c            = currAcc.BIC_Code__c;
                    if(currAcc.Bank_Number__c != null)          con.Bank_Number__c         = currAcc.Bank_Number__c;
                    if(currAcc.Bank_Name__c != null)            con.Bank_Name__c           = currAcc.Bank_Name__c;            
                    if(currAcc.Bank_Code_FR__c != null)         con.Bank_Code_FR__c        = currAcc.Bank_Code_FR__c;            
                    if(currAcc.RIB_Key_FR__c != null)           con.RIB_Key_FR__c          = currAcc.RIB_Key_FR__c;                
                    if(currAcc.Iban_Number__c != null)          con.Iban_Number__c         = currAcc.Iban_Number__c;
                    if(currAcc.Cashier_Code_FR__c != null)      con.Cashier_Code_FR__c     = currAcc.Cashier_Code_FR__c;
                    if(currAcc.SEPA_Pay_Type__c != null)        con.SEPA_Payment_Type__c   = currAcc.SEPA_Pay_Type__c;
                    if(currAcc.SORT_Code__c != null)            con.SORT_Code__c           = currAcc.SORT_Code__c;
                    if(currAcc.SEPA_MNDID__c != null)           con.SEPA_MNDID__c          = currAcc.SEPA_MNDID__c;            
                    if(currAcc.SEPA_Sign_Date__c != null)       con.SEPA_Sign_Date__c      = currAcc.SEPA_Sign_Date__c;
                    if(currAcc.SEPA_Status__c != null)          con.SEPA_Status__c         = currAcc.SEPA_Status__c;
                    if(currAcc.SEPA_Valid_From__c != null)      con.SEPA_Valid_From__c     = currAcc.SEPA_Valid_From__c;            
                    if(currAcc.SEPA_CRDID__c != null)           con.SEPA_CRDID__c          = currAcc.SEPA_CRDID__c;
                    if(currAcc.SEPA_Sign_City__c != null)       con.SEPA_Sign_City__c      = currAcc.SEPA_Sign_City__c;            
                    if(currAcc.SEPA_Valid_To__c != null)        con.SEPA_Valid_To__c       = currAcc.SEPA_Valid_To__c;            
                    if(currAcc.SEPA_B2B__c != null)             con.SEPA_B2B__c            = currAcc.SEPA_B2B__c;            
                }                                
                if(currAcc.Invoice_Addressee__c != null)    con.Invoice_Addressee__c   = currAcc.Invoice_Addressee__c;
                if(currAcc.Total_Amount_Due__c != null)     con.Total_Amount_Due__c    = currAcc.Total_Amount_Due__c;
                if(currAcc.Account_Type__c != null)         con.Account_Type__c        = currAcc.Account_Type__c;
                if(currAcc.AccountNumber != null)           con.Account_Number__c      = currAcc.AccountNumber;            
                if(currAcc.Payment_Terms__c != null)        con.Payment_Terms__c       = currAcc.Payment_Terms__c;            
                if(currAcc.Legal_Status__c != null)         con.Legal_Status__c        = currAcc.Legal_Status__c;
                if(currAcc.Total_Amount_Overdue__c != null) con.Total_Amount_Overdue__c= currAcc.Total_Amount_Overdue__c;
                if(currAcc.CurrencyIsoCode != null)         con.CurrencyIsoCode        = currAcc.CurrencyIsoCode;
                if(currAcc.Chamber_of_Commerce__c != null)  con.Chamber_of_Commerce__c = currAcc.Chamber_of_Commerce__c;            
                if(currAcc.Type != null)                    con.Type__c                = currAcc.Type;                
                if(currAcc.Date_Last_Payment_Received__c != null) con.Date_Last_Payment_Received__c = currAcc.Date_Last_Payment_Received__c;            
                if(currAcc.Destination_Account_Number__c != null) con.Destination_Account_Number__c = currAcc.Destination_Account_Number__c;                    
                                                                                         
                con.ShippingStreet     = currAcc.ShippingStreet;
                con.ShippingState      = currAcc.ShippingState;
                con.ShippingPostalCode = currAcc.ShippingPostalCode;
                con.ShippingCountry    = currAcc.ShippingCountry;
                con.ShippingCity       = currAcc.ShippingCity;
                              
                if(String.isNotEmpty(currAcc.BillingCountry) ||                
                   String.isNotEmpty(currAcc.BillingState) ||
                   String.isNotEmpty(currAcc.BillingCity) ||
                   String.isNotEmpty(currAcc.BillingStreet) ||
                   String.isNotEmpty(currAcc.BillingPostalCode))                 
                {     
                      con.BillingCountry    = currAcc.BillingCountry;
                      con.BillingState      = currAcc.BillingState;
                      con.BillingCity       = currAcc.BillingCity;
                      con.BillingStreet     = currAcc.BillingStreet;                                                                      
                      con.BillingPostalCode = currAcc.BillingPostalCode;                                                                      
                }else{
                      con.BillingCountry    = con.ShippingCountry;
                      con.BillingState      = con.ShippingState;
                      con.BillingCity       = con.ShippingCity;
                      con.BillingStreet     = con.ShippingStreet;                                                                      
                      con.BillingPostalCode = con.ShippingPostalCode;   
                }
                //filling lists account to set debtor numbers
                if(TWA_products.contains(con.Product__c))  TWAaccounts.add(currAcc);
                if(TLR_products.contains(con.Product__c))  TLRcontracts.add(con);
                if(TAS_products.contains(con.Product__c))  TASaccounts.add(currAcc);                                           
        }
        
        //set Debtor Numbers
        Product_AccountNumberHelper.getAccountNumbers(TWAaccounts,TASaccounts);
        //use old debtor number logic for FX contracts 
        ComputeDebtorNumber(TLRcontracts, mapAcc);
        //+1 SOQL to refresh account debtor numbers for contracts ((
        Map<ID, Account> newMapAcc = New Map<ID, Account>([SELECT Id, Debtor_Number__c,Debtor_Number_TAS__c,Debtor_Number_TWD__c                                
                                                          FROM Account 
                                                          WHERE Id IN :mapAcc.keySet()]);
        for (Contract con : newContracts)
        {               
            if(TWA_products.contains(con.Product__c))  con.Debtor_Number__c = newMapAcc.get(con.AccountId).Debtor_Number_TWD__c;
            if(TLR_products.contains(con.Product__c))  con.Debtor_Number__c = newMapAcc.get(con.AccountId).Debtor_Number__c;
            if(TAS_products.contains(con.Product__c))  con.Debtor_Number__c = newMapAcc.get(con.AccountId).Debtor_Number_TAS__c;
         }        
        //validate debit number
        contractDebitValidator(mapAcc, newContracts);
        //Validate the Contract Invoice Level with Subscription Consolidation Level 
        contractInvoiceLevelValidator(mapAcc, newContracts);
    } //ContractCreation
    
    private void ValidateInvoiceLevels(Contract[] newContracts, Contract[] oldContracts, Map <Id, sObject> newContractMap, Map <Id, sObject> oldContractMap)
    {
        //TLR_ContractCreationHandler contractHandler = new TLR_ContractCreationHandler();
        if(! newContracts.isEmpty())
        {
            //call ContractCreation_CommonMethod
            Map<ID, Account> mapAcc =  getAccountsMap(newContracts);
            //Validate the Contract Invoice Level with Subscription Consolidation Level 
            contractInvoiceLevelValidator(mapAcc, newContracts);
        }
    }//end of ContractCreation
    
    // ex ContractCreation_CommonMethod
    private Map<ID, Account> getAccountsMap(Contract[] newContracts)
    {
        if(newContracts.size() == 0)
            return null;
        
        List<ID> accntIDs = new List<ID>();
            for (Contract con : newContracts)
                accntIDs.add(con.AccountId);        
        Map<ID, Account> mapAcc = new Map<ID, Account>([
                                SELECT BillingStreet, 
                                       BillingState, 
                                       BillingPostalCode, 
                                       BillingCountry, 
                                       BillingCity, 
                                       ShippingStreet, 
                                       ShippingState, 
                                       ShippingPostalCode, 
                                       ShippingCountry, 
                                       ShippingCity,
                                       Account_Level__c,
                                       Bank_Number__c,
                                       BIC_Code__c,
                                       Bank_Code_FR__c,
                                       Cashier_Code_FR__c,
                                       RIB_Key_FR__c,
                                       Payment_Terms__c,
                                       Organization_Country__c,
                                       Name,
                                       ParentId,                                       
                                       Invoice_Addressee__c,
                                       Total_Amount_Due__c,
                                       Account_Type__c,
                                       SEPA_Valid_From__c,
                                       SEPA_MNDID__c,
                                       Iban_Number__c,
                                       Destination_Account_Number__c,
                                       SEPA_Pay_Type__c,
                                       SORT_Code__c,
                                       SEPA_Sign_Date__c,
                                       SEPA_Status__c,
                                       SEPA_CRDID__c,
                                       Total_Amount_Overdue__c,
                                       Direct_Debit__c,
                                       Date_Last_Payment_Received__c,
                                       Legal_Status__c,
                                       SEPA_Sign_City__c,
                                       Bank_Name__c,
                                       SEPA_Valid_To__c,
                                       SEPA_B2B__c,
                                       CurrencyIsoCode,
                                       AccountNumber,
                                       Chamber_of_Commerce__c,
                                       Account_Life_Cycle__c,                                     
                                       Debtor_Number__c, //TLR DebtorNumbers
                                       Debtor_Number_TAS__c,
                                       Debtor_Number_TWD__c,
                                       Type                                
                                  FROM Account 
                                 WHERE Id IN :accntIDs]);
        return mapAcc;
    }//end of getAccountsMap
    
    /* 
        method verifies account level and contract level:
        We have following account and contract levels scheme:
                International
                National
                Conpany
                Site
        Account level should be the same or higher than contract level.
    */
    public void contractInvoiceLevelValidator(Map<ID, Account> mapAcc, Contract [] contractLst)
    {
        if(contractLst.isEmpty() || mapAcc.isEmpty())
            return;
        
        for(Contract objContract : contractLst)
        {
            string accountLevel = mapAcc.get(objContract.AccountId).Account_Level__c;
            string newContractLevel = objContract.Invoice_Level__c;
            if (string.isNotEmpty(newContractLevel) && string.isNotEmpty(accountLevel))
            {
                integer ilvContract = Utilities.getInvoiceLevelValue(newContractLevel);
                integer ilvAccount  = Utilities.getInvoiceLevelValue(accountLevel);
                
                if(ilvContract > ilvAccount)
                    objContract.Invoice_Level__c.addError('Invoice Level must be less than or equal with Account Level!');
            }
        }//end of for loop
    }//end of Method
    
    /**
    * @ Description   : contractDebitValidator method is used to fulfill Business rule :  If Contract.Payment Method = Direct Debit,
                        then the following fields must be completed in the Account which is at the level of account hierarchy specified by Contract.
                        Invoice Level: - Bank Number ,- BIC Code ,- Bank Code, Cashier Code and RIB Key only if Organization Country = France
                        - Payment Terms shall be equal to 45 only if Organization Country = France
    * @ Date          : 22-10-2012
    * @ Author        : HCL Technology
    * Modified:         02-10-2013, Anton Solovyev.
    * Description:      Bulkified SOQL queries inside loop.
                        variables names were confusing (e.g. contactObj, when it is Contract type)
    **/
    public void contractDebitValidator(Map<ID, Account> mapAcc, Contract [] contractLst)
    {
        try
        {
            system.debug('========= TRIG_ContractTriggerHandler: contractDebitValidator: contractList: ' + contractLst);
            if (mapAcc.size() == 0 || contractLst.size() == 0)
                return;
            List<Id> aIdList = new List<Id>();
            for(Contract c : contractLst)
                aIdList.add(c.AccountId);
                
            Map<Id, Set<Account>> childAccountsMap = getChildAccounts(aIdList);
            
            for (Contract contract : contractLst)
            {
                System.debug('contactObj=>' + contract);
                if(contract.Status__c != 'Cancelled'
                    && contract.Status__c != 'On Notice'
                    && contract.Payment_Method__c.equalsIgnoreCase('Direct Debit'))
                {
                    //List <Account> accountIdList = GetParentIds(contactObj.AccountId);
                    // here we have 3 SOQL queries per call
                    //
                    Set <Account> accountIdList = childAccountsMap.get(contract.AccountId);
                    system.debug('========= TRIG_ContractTriggerHandler: contractDebitValidator: accountIdList: ' + accountIdList);
                } // if contact not cancelled and not on notice and payment method is direct debit
            } // for each contract in contractList
        }
        catch (Exception e)
        {
            system.debug('Error : ' + e.getMessage());
        }
        finally
        {
            // If we need to do any action after end of this method we can perform that action here
        }
    } // contractDebitValidator
    
    /*
    * @ Description  :  Following function returns all child accounts for given account list.
    *                   Bulkified version of function above
    * @ Param        :  accounts Id list
    * @ Date         :  02-10-2013
    * @ Author       :  Anton Solovyev
    * @ Returns      : Map. Key is account Id, value - set of its child accounts
    **/
    public Map<Id, Set<Account>> getChildAccounts(List<Id> accountIds)
    {
        if(accountIds.size() < 1)
            return null;
        Map<Id, Set<Account>> retVal = new Map<Id, Set<Account>>();
        // fill itself values
        List<Account> accSelfList = [
            SELECT
                Id, ParentId, Name, Account_Level__c, Bank_Number__c,
                BIC_Code__c, Bank_Code_FR__c, Cashier_Code_FR__c, RIB_Key_FR__c,
                Payment_Terms__c, Organization_Country__c
            FROM Account
            WHERE Id IN :accountIds
        ];
        for(Account a : accSelfList)
        {
            Set<Account> s = new Set<Account>();
            s.add(a);
            retVal.put(a.Id, s);
        }

        // fill first level childs
        List<Account> acc1stChildList = [
            SELECT
                Id, ParentId, Name, Account_Level__c, Bank_Number__c,
                BIC_Code__c, Bank_Code_FR__c, Cashier_Code_FR__c, RIB_Key_FR__c,
                Payment_Terms__c, Organization_Country__c
            FROM Account
            WHERE ParentId IN :accountIds
        ];
        for(Account a : acc1stChildList)
            retVal.get(a.ParentId).add(a);

        // fill second level childs
        List<Account> acc2ndChildList = [
            SELECT
                Id, ParentId, Name, Account_Level__c, Bank_Number__c,
                BIC_Code__c, Bank_Code_FR__c, Cashier_Code_FR__c, RIB_Key_FR__c,
                Payment_Terms__c, Organization_Country__c, Parent.ParentId
            FROM Account
            WHERE ParentId IN :acc1stChildList
        ];
        for(Account a : acc2ndChildList)
            retVal.get(a.Parent.ParentId).add(a);
        return retVal;
    } // getChildAccounts

    public void ComputeDebtorNumber(Contract[] newContracts, Map<ID, Account> accounts)
    {
        Set<ID> acctIds= new Set<ID>();    
        List<Account> accToUpdate = new List<Account>();
        if(newContracts.isEmpty())
            return;
            
               
        // Organization countries + Debtor Number organizations
        Map<String, Mapping_Organization_Country__c> mapOrgaCntries = Mapping_Organization_Country__c.getAll();
        Map<String, Debtor_Number_Organization__c>    mapDbtNbOrgas  = Debtor_Number_Organization__c.getAll();
        for(Contract c : newContracts)
        {
            if(c.RecordTypeId == TLRContractRecordTypeId)
            {
                if(string.isEmpty(accounts.get(c.AccountId).Debtor_Number__c))
                {
                    String orga = '';
                    if(mapOrgaCntries.get(accounts.get(c.AccountId).Organization_Country__c) != null)
                        orga = mapOrgaCntries.get(accounts.get(c.AccountId).Organization_Country__c).Debtor_Numbering_Key__c;                    
                        if(orga == '')
                            orga = 'Account unknown';
                            Debtor_Number_Organization__c organization = mapDbtNbOrgas.get(orga);
                            if (organization != null && organization.Type__c == 'TR_DEBTOR_NUM_ALG')
                            {
                                Integer nextVal = integer.valueOf(organization.Next_Value__c);
                                accounts.get(c.AccountId).Debtor_Number__c     = nextVal.format().replaceAll('[^0-9]', '');
                                accToUpdate.add(accounts.get(c.AccountId));
                                organization.Next_Value__c++;
                            }
                            else
                                c.addError('Account Debtor Number Organization was not found or is not valid.');
                 } // if debtor number is empty
            } // if contract is TLR contract
        }//end of for loop     
        // Update impacted accounts
        if (accToUpdate.size() > 0)
        {
            try
            {
                update accToUpdate;
            }
            catch(Exception ex)
            {
                System.debug('Account Failed on Contract=>' + ex);
            }
        }
        // Update all Debtor Number Organizations
        if (mapDbtNbOrgas.size() > 0)
        {
            try
            {
                update mapDbtNbOrgas.values();
            }
            catch(Exception ex)
            {
                System.debug('Debtor number=>' + ex);
            }
        }
    }//end of ComputeDebtorNumber
    
    /*
    * @ Description     :- Updates account life cycle value: if it is not customer - we need to do it customer
    * @ Date            :- 4.4.2014
    * @ Author          :- Anton Soloveyv
            1 SOQL Query, 1 DML statement
    */
    private void UpdateAccountLifeCycle(List<Contract> contracts)
    {
        if(contracts.isEmpty())
            return;
        
        List<Id> accIdList = new List<Id>();
        for(Contract c : contracts)
            accIdList.add(c.AccountId);
        
        // at the beginning we were need to update TLR accounts oonly, now we need to update all accounts: TLR, TWD, TAS
        List<Account> accounts = [
            SELECT
                Id, RecordTypeId, Account_Life_Cycle__c
            FROM Account
            WHERE Id IN : accIdList
                AND Account_Life_Cycle__c != 'Customer'
        ];
        
        if(accounts.size() > 0)
        {
            for(Account a : accounts)
                a.Account_Life_Cycle__c = 'New Customer';
            
            update accounts;
        }
    } //UpdateAccountLifeCycle
    
    /*
    * 
    * before undate Contracts: if Direct_Debit is TRUE - load SEPA Info from Account To contract 
    * 30/01/2015 aleh_tsilko@epam.com
    */
    private void updateSEPASection(Contract[] newContracts, Contract[] oldContracts, Map <Id, sObject> newContractMap, Map <Id, sObject> oldContractMap)
    {
        if(newContracts.isEmpty()) return;
        Map<ID, Account> mapAcc =  getAccountsMap(newContracts);
        for (Contract con : newContracts)
        {
            Contract oldCon = (Contract)oldContractMap.get(con.Id); 
            //check Direct_Debit field change, If value TRUE --> FALSE, clear SEPA fields on Contract 
            if(con.Direct_Debit__c == FALSE && oldCon.Direct_Debit__c == TRUE)
            {
                con.BIC_Code__c = '';
                con.Bank_Number__c = '';
                con.Bank_Name__c = '';
                con.Bank_Code_FR__c = '';
                con.RIB_Key_FR__c = '';
                con.Iban_Number__c = '';
                con.Cashier_Code_FR__c = '';
                con.SEPA_Payment_Type__c = '';
                con.SORT_Code__c = '';
                con.SEPA_MNDID__c = '';
                con.SEPA_Sign_Date__c = null;
                con.SEPA_Status__c = '';
                con.SEPA_Valid_From__c = null;
                con.SEPA_CRDID__c = '';
                con.SEPA_Sign_City__c = '';
                con.SEPA_Valid_To__c = null;
                con.SEPA_B2B__c = FALSE;
            }
            //check Direct_Debit field change, If value FALSE --> TRUE, fill SEPA fields on Contract from Account 
            if(con.Direct_Debit__c == TRUE && oldCon.Direct_Debit__c == FALSE)
            {
                Account currAcc = mapAcc.get(con.AccountId);  
                if(currAcc.BIC_Code__c != null)             con.BIC_Code__c            = currAcc.BIC_Code__c;
                if(currAcc.Bank_Number__c != null)          con.Bank_Number__c         = currAcc.Bank_Number__c;
                if(currAcc.Bank_Name__c != null)            con.Bank_Name__c           = currAcc.Bank_Name__c;            
                if(currAcc.Bank_Code_FR__c != null)         con.Bank_Code_FR__c        = currAcc.Bank_Code_FR__c;            
                if(currAcc.RIB_Key_FR__c != null)           con.RIB_Key_FR__c          = currAcc.RIB_Key_FR__c;                
                if(currAcc.Iban_Number__c != null)          con.Iban_Number__c         = currAcc.Iban_Number__c;
                if(currAcc.Cashier_Code_FR__c != null)      con.Cashier_Code_FR__c     = currAcc.Cashier_Code_FR__c;
                if(currAcc.SEPA_Pay_Type__c != null)        con.SEPA_Payment_Type__c   = currAcc.SEPA_Pay_Type__c;
                if(currAcc.SORT_Code__c != null)            con.SORT_Code__c           = currAcc.SORT_Code__c;
                if(currAcc.SEPA_MNDID__c != null)           con.SEPA_MNDID__c          = currAcc.SEPA_MNDID__c;            
                if(currAcc.SEPA_Sign_Date__c != null)       con.SEPA_Sign_Date__c      = currAcc.SEPA_Sign_Date__c;
                if(currAcc.SEPA_Status__c != null)          con.SEPA_Status__c         = currAcc.SEPA_Status__c;
                if(currAcc.SEPA_Valid_From__c != null)      con.SEPA_Valid_From__c     = currAcc.SEPA_Valid_From__c;            
                if(currAcc.SEPA_CRDID__c != null)           con.SEPA_CRDID__c          = currAcc.SEPA_CRDID__c;
                if(currAcc.SEPA_Sign_City__c != null)       con.SEPA_Sign_City__c      = currAcc.SEPA_Sign_City__c;            
                if(currAcc.SEPA_Valid_To__c != null)        con.SEPA_Valid_To__c       = currAcc.SEPA_Valid_To__c;            
                if(currAcc.SEPA_B2B__c != null)             con.SEPA_B2B__c            = currAcc.SEPA_B2B__c;      
            }
        }
    }//end updateSEPASection
    
    private void AssignAdministrativeContact(List<Contract> newContracts)
    {
        List<string> accountsId = new List<string>();
        for(Contract cont : newContracts)
        {
            accountsId.add(cont.AccountId);
        }
        List<Contact> contacts = [Select Id, AccountId From Contact Where Administrative_contact__c = true and AccountId =: accountsId];
        if(contacts.size() > 0)
        {
            Map<Id,Id> contactForAccount = new Map<Id,Id>();
            for(Contact con : contacts)
            {
               contactForAccount.put(con.AccountId, con.Id); 
            }
            for(Contract contr : newContracts)
            {
                if(contactForAccount.containsKey(contr.AccountId))
                {
                    contr.Contract_Contact__c = contactForAccount.get(contr.AccountId);
                }
            }
        }
    }
    
    private void CreateTasksForWelcomeProcess(List<Contract> newTriggerValues)
    {
        Set<Id> accIds = new Set<Id>();
        Set<Id> contractIds = new Set<Id>();
        Map<String, EWP_Tasks__c> taskTemplates = EWP_Tasks__c.getAll();
        Map<String, String> taskRecordTypes = new Map<String, String>();
        Set<String> EWPValues = new Set<String>();
        try
        {
            for(EWP_Tasks__c template: taskTemplates.values())
            {
                EWPValues.add(template.EWP_Value__c);
                if(!taskRecordTypes.containsKey(template.Record_Type_Name__c))
                {
                    taskRecordTypes.put(template.Record_Type_Name__c, TLR_RecordTypeHelper.getId('Task', template.Record_Type_Name__c));
                }
            }
        }
        catch(Exception ex)
        {
            throw new Generic.StandardException('Something went wrong during automatic creation of tasks. Please, contact your administrator');
        }
        for(Contract contr : newTriggerValues)
        {

            if(!contr.EWP_tasks_created__c && EWPValues.contains(contr.Extended_Welcome_Process__c))
            {
            	accIds.add(contr.AccountId);
                contractIds.add(contr.Id);
            }
        }
        if(contractIds.size() > 0)
        {
            List<Task> tasksToInsert = new List<Task>();
            List<Contract> contractsToUpdate = new List<Contract>();
            List<Contract> newContracts = [Select Id, Extended_Welcome_Process__c, Status__c, ActivatedDate,AccountId, EWP_tasks_created__c From Contract Where Id =: contractIds];
            Map<Id, Account> contrAccsMap = new Map<Id, Account>([select Id, OwnerId from Account where Id =: accIds]);
            
            boolean updateContract = false;
            for(Contract contr : newContracts)
            {
                updateContract = false;
                if(!contr.EWP_tasks_created__c && contr.Status__c == 'Active' && contr.ActivatedDate != null)
                {
                    for(EWP_Tasks__c template :taskTemplates.values())
                    {
                        if(template.EWP_Value__c == contr.Extended_Welcome_Process__c)
                        {
                            Task newTask = new Task();
                            newTask.RecordTypeId = taskRecordTypes.get(template.Record_Type_Name__c);
                            newTask.Type = template.Type__c;
                            newTask.Product__c = template.Product_Line__c;
                            newTask.Subject_Group__c = template.Subject_Group__c;
                            newTask.Subject = template.Subject__c;
                            newTask.Subject1__c = template.Subject__c;
                            newTask.ActivityDate = (contr.ActivatedDate.addMonths((integer)template.Months_till_Due_Date__c).addDays((integer)template.Days_till_Due_Date__c)).date();
                            newTask.OwnerId = contrAccsMap.get(contr.AccountId).OwnerId;
                            newTask.Description = template.Description__c;
                            newTask.WhatId = contrAccsMap.get(contr.AccountId).Id; 
                            tasksToInsert.add(newTask);    
                            updateContract = true; 
                        }
                    }
                }
                if(updateContract)
                {
                    contr.EWP_tasks_created__c = true;
                    contractsToUpdate.add(contr);
                }
            }
            if(tasksToInsert.size() > 0)
            {
                system.savepoint sp = Database.setSavepoint();
                try
                {
                    insert tasksToInsert;
                    update contractsToUpdate; 
                }
                catch(Exception e)
                {
                    Database.rollback(sp);
                    throw new Generic.StandardException('Something went wrong during automatic creation of tasks. Please, contact your administrator');
                }            
            }
        }	
    }
}